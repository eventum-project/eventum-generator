"""Utils for aggregation of timestamps generated by input plugins."""

from datetime import timedelta

import numpy as np
from numpy.typing import NDArray

from eventum.api.routes.preview.models import AggregatedTimestamps

_AUTO_SPANS_US = np.array(
    [
        1,  # 1s
        5,  # 5s
        10,  # 10s
        15,  # 15s
        30,  # 30s
        60,  # 1m
        300,  # 5m
        600,  # 10m
        900,  # 15m
        1800,  # 30m
        3600,  # 1h
        7200,  # 2h
        14400,  # 4h
        21600,  # 6h
        43200,  # 12h
        86400,  # 1d
        604800,  # 7d
        2592000,  # 30d
    ],
    dtype='timedelta64[s]',
).astype('timedelta64[us]')

_OPTIMAL_SPANS_COUNT = 60


def aggregate_timestamps(
    timestamps: NDArray[np.datetime64],
    span: timedelta | None,
) -> AggregatedTimestamps:
    """Aggregate timestamps into fixed, aligned spans.

    Parameters
    ----------
    timestamps : NDArray[np.datetime64]
        Array of datetime64 timestamps.

    span : timedelta | None
        Span duration. In case `None` is provided auto span is used.

    Returns
    -------
    AggregatedTimestamps
        Aggregated timestamps.

    """
    if timestamps.size == 0:
        return AggregatedTimestamps(span_edges=[], span_counts=[])

    if span is None:
        optimal_span = np.timedelta64(
            (timestamps.max() - timestamps.min())
            / min(_OPTIMAL_SPANS_COUNT, timestamps.size),
            'us',
        )

        indexes = np.where(optimal_span >= _AUTO_SPANS_US)[0]
        index = indexes[-1] if indexes.size > 0 else 0
        span_td64 = _AUTO_SPANS_US[index]
    else:
        span_td64 = np.timedelta64(span, 'us')

    origin = np.datetime64('1970-01-01', 'us')
    existing_spans = (timestamps - origin) // span_td64

    min_span, max_span = existing_spans.min(), existing_spans.max()
    all_spans: NDArray = np.arange(min_span, max_span + 1)

    counts = np.bincount(existing_spans - min_span, minlength=all_spans.size)
    bin_edges: NDArray = all_spans * span_td64 + origin

    return AggregatedTimestamps(
        span_edges=bin_edges.tolist(),  # type: ignore[arg-type]
        span_counts=counts.tolist(),  # type: ignore[arg-type]
    )
